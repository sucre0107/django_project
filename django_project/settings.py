"""
Django settings for django_project project.

Generated by 'django-admin startproject' using Django 4.2.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# resolve() 返回绝对路径，.parent 返回上一级目录，然后.parent 返回上上级目录，以此类推

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
# 这里的 SECRET_KEY 用于加密，不要泄露，建议从环境变量中读取
SECRET_KEY = 'django-insecure-oav2*%d1w81s_g8dityti8$y0uvk6rr^bg+-q5#@@0hk_^67t6'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
# 当True时，Django会在每个请求的页面底部显示一个小提示，提示当前使用的是开发模式，不要在生产环境中使用
# 因为开发模式下，Django会自动帮你做一些事情，比如自动加载修改后的代码，自动刷新页面等等，这些都是为了方便开发者调试代码，但是这些功能在生产环境中是不需要的，所以要关闭DEBUG模式
ALLOWED_HOSTS = []  # 当DEBUG为False时，需要配置允许访问的域名，否则会报错
# 一般来说，ALLOWED_HOSTS 只需要配置域名，不需要配置协议和端口号，比如 www.example.com，而不是 http://www.example.com:8000
# nginx 代理时，需要配置 ALLOWED_HOSTS = ['*']，否则会报错

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'app1',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'django_project.urls'



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'app1/templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    }
]

WSGI_APPLICATION = 'django_project.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': BASE_DIR / 'db.sqlite3',
#     }
# }

# 用于连接 MySQL 数据库
DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'django',
        'USER': 'root',
        'PASSWORD': '123456',
        'HOST': '127.0.0.1',
        'PORT': '3306',
    }
}

# 用于连接 Redis 数据库
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': 'redis://:redispw@localhost:32768/0',
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient',
        },
        # 缓存前缀，
        'KEY_PREFIX': 'django_project',
        # 最大连接数
        'CONNECTION_POOL_KWARGS': {'max_connections': 100},
        'TIMEOUT': 3000000,  # 缓存超时时间
    }
}

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.account.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.account.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.account.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.account.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = '/static/'  # 静态文件的访问路径
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
# 静态文件的存放路径， 使用python3 manage.py collectstatic 命令
# 将所有的静态文件收集到 STATIC_ROOT 目录下
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'app1/static'),
                    os.path.join(BASE_DIR, 'staticfiles'),

                    ]  # 这里是静态文件的路径，可以有多个
# 静态文件的搜索路径，当找不到静态文件时，会在这些目录下查找
# 找到路径之后，如何生产url呢？这就是STATIC_URL的作用了，它会将找到的静态文件的路径，拼接到STATIC_URL后面，生成一个url


# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
